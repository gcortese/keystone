extends ../../../common/templates/layout/base

include ../../templates/mixins/docsnav

block intro
	.page-header
		.container
			h1 入门指南
			p.lead 这个指南会逐步指导你如何构建KeystoneJS网站。
				a(href='/zh/getting-started') 这里还有个生成器。
	
block content
	.container: .row
		
		.col-sm-3
			+docsnav(docssection)
		
		.col-sm-9: .docs-content
			
			h2
				a(name="introduction")
				| 简介
				
			.alert.alert-warning 这个指南目前正在更新中，以体现新的Yeoman生成器。
			
			p KeystoneJS使得在node.js中搭建数据库驱动的网站、应用程序和API变得容易了。
			p KeystoneJS在底层使用了<a href="http://expressjs.com" target="_blank">express.js</a> web服务器框架，并通过对象建模框架<a href="mongoosejs.com" target="_blank">mongoose</a>使用<a href="http://mongodb.com" target="_blank">MongoDB</a>数据库。
			
			.contextual-note
				h4 简单 vs. 灵活
				p 设计Keystone的目的是要把复杂的事情变简单，不会限制node.js或以其为基础的框架的能量或灵活性。
				p 这个指南会告诉你如何用默认的项目结构及选项搭建一个KeystoneJS网站。 
				p 要想深入了解底层的运行机制，以及如何扩展或替换某些功能，我们强烈建议你读一读<a href="https://github.com/keystonejs/keystone" target="_blank">源码</a>。
			
			a(name="introduction-prerequisites")
			h3 前提条件
			
			ol.fancy-list
				li 开始之前，先确保你装了<a href="http://nodejs.org/download" target="_blank">Node.js</a>和<a href="http://www.mongodb.org/downloads" target="_blank">MongoDB</a>。
				li 要使用KeystoneJS，你需要掌握合理的Javascript知识，并熟悉数据库概念之类的基础知识，会用 node / npm 等。
				li 这个指南中还会用<a href="http://jade-lang.com" target="_blank">Jade</a>作为视图模板，<a href="http://lesscss.org" target="_blank">LESS</a>作CSS模板。你可以在自己的项目中使用任何模板语言；参阅<a href="#templates_other">使用其它模板语言</a> (下面)了解详情。
			
			a(name="introduction-productionvsdevelopment")
			h3 生产 vs. 开发
			
			p Keystone在生产和开发模式下会使用不同的设定。默认环境为<code>development</code>，为了提升性能，你应该在生产服务器上将环境变量<code>NODE_ENV</code>设为<code>production</code>。
			p 调用<code>keystone.get('env')</code>可以检测出程序运行在哪种环境下。
			
			a(name="gettingstarted")
			h2 入门
			
			a(name="gettingstarted-usingyeoman")
			h3 使用Yeoman生成器
			
			p 开始KeystoneJS之旅最容易的方式是使用我们新的Yeoman生成器。
			p 我们仍在更新这个入门指南，以体现这个生成器的用法；现在请到<a href="https://github.com/keystonejs/generator-keystone" target="_blank">KeystoneJS Yeoman生成器</a>页面遵照那里的指示行事。
			p 运行<code>yo keystone</code>会做好下面所讲的全部工作，所以你一旦得到自己的新项目，请继续读下去以便了解它做了什么。
			
			a(name="gettingstarted-startinganewproject")
			h3 开始一个新项目
			
			p 给你的项目创建一个新目录，然后添加下面两个文件，它们要负责项目的设置和启动你的web服务器。
			
			.code-header
				h4 package.json
				p 这是给npm的项目描述文件，包括它基于<code>keystone</code>这个事实。
			pre: code.language-javascript
				| {
				|   "name": "my-project",
				|   "version": "0.0.1",
				|   "private": true,
				|   "dependencies": {
				|     "keystone": "latest",
				|     "underscore": "latest"
				|   },
				|   "engines": {
				|     "node": "0.10.x",
				|     "npm": "1.3.x"
				|   },
				|   "scripts": {
				|     "start": "web.js"
				|   }
				| }
			
			p.note 注意，我们还引入了<a href="http://underscorejs.org">underscore库</a>，因为稍后会用到它的一些功能。你可以将<a href="https://npmjs.org">npm</a>中的任何包添加到<code>package.json</code>中使用它们。
			
			.code-header
				h4 web.js
				p 这是运行我们的keystone网站的脚本。
			pre: code.language-javascript
				| var keystone = require('keystone');
				| keystone.init({
				|   
				|   'name': 'My Project',
				|   
				|   'favicon': 'public/favicon.ico',
				|   'less': 'public',
				|   'static': ['public'],
				|   
				|   'views': 'templates/views',
				|   'view engine': 'jade',
				|   
				|   'auto update': true,
				|   'mongo': 'mongodb://localhost/my-project',
				|   
				|   'session': true,
				|   'auth': true,
				|   'user model': 'User',
				|   'cookie secret': '(your secret here)'
				|   
				| });
				| 
				| require('./models');
				| 
				| keystone.set('routes', require('./routes'));
				| 
				| keystone.start();
			
			p 现在在你的控制台中进入项目根目录（package.json所在的位置），运行<code>npm install</code>来安装Keystone。
			p.note 要了解Keystone支持的更多选项，请参见<a href="/zh/docs/configuration">配置指南</a>。
			p.note 注意：你的web脚本还不能运行，因为其中包含的模型和路由都还没做好。它假定你会遵照这个指南中的指示。
			
			.contextual-note
				h4 自带Express和Mongoose
				p 如果你想在项目中引入Express或Mongoose，不用完全由Keystone提供和配置的，也可以。
				p 把它们放在项目的dependencies列表中，然后分别用 <code>app</code> 和 <code>mongoose</code> 参数提供给Keystone。
				pre
					| var express = require('express'),
					|     mongoose = require('mongoose'),
					|     app = express(),
					|     keystone = require('keystone');
					|     
					|     keystone.set('app', app);
					|     keystone.set('mongoose', mongoose);
			
			p.note 之前用来设置自带Express和Mongoose的 <code>keystone.connect()</code> 方法，现已过期并且会在未来的Keystone版本中移除。由于升级至Express 4，`keystone.connect()` 不再如预期般工作。 请使用Keystone中的 <code>app</code> 和 <code>mongoose</code> 参数来替代。
				
			a(name="gettingstarted-projectstructure")
			h3 项目结构
			
			p 在包和web脚本到位后，可以开始架构程序剩余部分的容器。创建下面这个目录结构：

			pre
				| |--lib
				| |  <span>定制的库和代码</span>
				| |--models
				| |  <span>程序的数据库模型</span>
				| |--public
				| |  <span>公开的静态文件 (css、js、images等)</span>
				| |--routes
				| |  |--api
				| |  |  <span>程序的api控制器</span>
				| |  |--views
				| |  |  <span>程序的视图控制器</span>
				| |  |--index.js
				| |  |  <span>初始化程序的路由和视图</span>
				| |  |--middleware.js
				| |  |  <span>为路由定制的中间件</span>
				| |--templates
				| |  |--includes
				| |  |  <span>通用的 .jade 组件放这里</span>
				| |  |--layouts
				| |  |  <span>基础 .jade 布局放这里</span>
				| |  |--mixins
				| |  |  <span>通用的 .jade mixins放这里</span>
				| |  |--views
				| |  |  <span>程序的视图模板</span>
				| |--updates
				| |  <span>数据组装和迁移脚本</span>
				| |--package.json
				| |  <span>给npm的项目配置</span>
				| |--web.js
				| |  <span>启动程序的主脚本</span>
			
			p 我们建议尽可能地将<code>routes/views</code>和<code>templates/views</code>目录的内部结构做镜像式的对应，这样程序的搭建和维护会更简单。
			
			.contextual-note
				h4 结构
				p 该指南假定你会遵守上面的建议，然而Keystone实际上对结构没有任何强制性的要求，所以你可以随意修改，使其更加适合你的项目。
			
			
			a(name="models")
			h2 模型
			
			p 在可以启动Keystone程序之前，你需要一些数据模型。
			
			p 我们准备从<code>User</code>模型开始，它很特别 - 有了它Keystone才能做认证和会话管理。
			
			p 在<code>/models</code>文件夹下创建下面这两个文件：
			
			.code-header
				h4 models/index.js
				p 在这个脚本里包含你的模型。它不需要输出任何东西。
			pre: code.language-javascript
				| require('./users.js');
			
			.code-header
				h4 models/users.js
				p 这个脚本初始化<code>User</code>模型。它不需要输出任何东西，但模型<em>必须</em>用Keystone注册。
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     Types = keystone.Field.Types;
				| 
				| var User = new keystone.List('User');
				| 
				| User.add({
				|     name: { type: Types.Name, required: true, index: true },
				|     email: { type: Types.Email, initial: true, required: true, index: true },
				|     password: { type: Types.Password, initial: true },
				|     canAccessKeystone: { type: Boolean, initial: true }
				| });
				| 
				| User.register();
			
			
			a(name="models-authentication")
			h3 认证和会话管理
			
			p 要让Keystone为程序提供认证和会话管理，它需要知道几件事情（我们现在要配置的）
			
			p 概括一下：
			ul.list
				li 参数<code>user model</code>必须是Keystone在其中查找用户的模型名称。如果你的模型用了其它名称，一定确保正确设定这个参数。
				li 如果你的程序要支持会话管理，将参数<code>session</code>设为<strong>true</strong>。加载会话会有点小开销，所以如果你的程序不需要会话，可以把这个关了。
				li Keystone有内置的登录和退出视图。可以将参数<code>auth</code>设为<strong>true</strong>启用它们。你也可以在程序视图中定制登录和退出界面。
				li 会话是用存有用户ID的加密cookie持久化的。一定要将参数<code>cookie secret</code>设成一个长长的随机字符串。
				li 用户模型必须有个<code>canAccessKeystone</code>属性（可以是虚拟方法或存储的boolean型域）指出用户是否可以访问Keystone的管理界面。
			
			h4 再谈数据模型
			
			p 要学习如何设置程序的模型，以及列表和域的完整文档，请参见<a href="/zh/docs/database">数据库指南</a>。

			a(name="routesviews")
			h2 路由 &amp; 视图
			
			p 一般来说，在配置程序中的不同路由（或视图）时，应该把所有绑定放在一个文件中，然后通用逻辑（或中间件）放在另一个文件中，这是最容易也是最清爽的方式。
			p 然后，给每个路由绑定的控制器在各自的文件中，跟组织渲染视图的模板的方式类似。
			p Keystone的<code>importer</code>和Express中间件的支持使得这很容易设置。
			
			a(name="routesviews-settingup")
			h3 设置路由和中间件
			
			h4 index路由控制器
			
			p 首先创建一个<code>routes/index.js</code>文件。我们在这里将程序的URL模式绑定到控制器上，从而在收到请求后让控制器加载和处理数据，并渲染相应的模板。
			
			.code-header
				h4 routes/index.js
				p 这段脚本引入路由控制器，并将它们绑定到URL上。
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     middleware = require('./middleware'),
				|     importRoutes = keystone.importer(__dirname);
				| 
				| // 常用中间件
				| keystone.pre('routes', middleware.initErrorHandlers);
				| keystone.pre('routes', middleware.initLocals);
				| keystone.pre('render', middleware.flashMessages);
				| 
				| // 处理404错误
				| keystone.set('404', function(req, res, next) {
				|     res.notfound();
				| });
				| 
				| // 处理其它错误
				| keystone.set('500', function(err, req, res, next) {
				|     var title, message;
				|     if (err instanceof Error) {
				|         message = err.message;
				|         err = err.stack;
				|     }
				|     res.err(err, title, message);
				| });
				| 
				| // 加载路由
				| var routes = {
				|     views: importRoutes('./views')
				| };
				| 
				| // 绑定路由
				| exports = module.exports = function(app) {
				|     
				|     app.get('/', routes.views.index);
				|     
				| }

			h4 逐步解释index路由控制器
			
			ul
				li 加载<code>keystone</code>、<code>middleware.js</code> 文件 (见下方)，并为当前目录创建一个<code>importer</code>
				li 绑定中间件 (见下方) 
					ul
						li 初始化基本的错误处理器
						li 为视图模板初始化通用的local变量
						li 在视图目标渲染之前从会话中获取提示消息
				li 告诉Keystone如何处理<code>404</code>和<code>500</code>错误
				li 用importer加载<code>/routes/views</code>目录中的所有路由控制器
				li 输出一个方法，将index路由控制器绑定到根url‘<code>/</code>’的<code>GET</code>请求上
					ul
						li 这个方法中的参数<code>app</code>就是express的app，所以在express中绑定路由能做的事情，在这里都可以做。
			
			p 应该在根控制器下面用<code>app.get</code>、<code>app.post</code> 或 <code>app.all</code> 将其它路由控制器添加到程序中。
			
			
			a(name="routesviews-middleware")
			h3 通用路由中间件
			
			p 把你的通用路由中间件放在单独的<code>routes/middleware.js</code>文件中，以保持路由index的干净整洁。 如果中间件文件太大，最好把所有重大功能重构到定制的模块中，放在项目的<code>/lib</code>文件夹下。
			p 现在我们要添加基本的中间件，在程序启动后运行默认的行为：
			
			.code-header
				h4 routes/middleware.js
				p 这个脚本应该包含程序路由的通用中间件
			pre: code.language-javascript
				| var _ = require('underscore'),
				|     keystone = require('keystone');
				| 
				| /**
				|     初始化标准的视图locals。
				|     包含应该在路由控制器执行之前初始化的所有东西。
				| */
				| exports.initLocals = function(req, res, next) {
				|     
				|     var locals = res.locals;
				|     
				|     locals.user = req.user;
				|     
				|     // 在这里添加你自己的local变量
				|     
				|     next();
				|     
				| };
				| 
				| /**
				|     初始化错误处理函数到`res`中
				| */
				| exports.initErrorHandlers = function(req, res, next) {
				|     
				|     res.err = function(err, title, message) {
				|         res.status(500).render('errors/500', {
				|             err: err,
				|             errorTitle: title,
				|             errorMsg: message
				|         });
				|     }
				|     
				|     res.notfound = function(title, message) {
				|         res.status(404).render('errors/404', {
				|             errorTitle: title,
				|             errorMsg: message
				|         });
				|     }
				|     
				|     next();
				|     
				| };
				| 
				| /**
				|     在视图渲染之前获取并清理flashMessages
				| */
				| exports.flashMessages = function(req, res, next) {
				|     
				|     var flashMessages = {
				|         info: req.flash('info'),
				|         success: req.flash('success'),
				|         warning: req.flash('warning'),
				|         error: req.flash('error')
				|     };
				|     
				|     res.locals.messages = _.any(flashMessages, function(msgs) { return msgs.length }) ? flashMessages : false;
				|     
				|     next();
				|     
				| };
			
			h4 中间件函数
			
			p Keystone希望中间件函数接受下面这些参数：
			ul.options
				li <code>req</code> - express请求对象
				li <code>res</code> - express响应对象
				li <code>next</code> - 中间件结束运行时调用的方法 (包括任何内部回调)
			
			h4 支持提示消息（Flash Messages） (不, 不是那个flash)
			
			p Keystone通过会话支持给访问者的'flashing'消息。上面的默认设置支持4种消息，全都可以做成不同的样式：
			ul.options
				li <code>info</code>
				li <code>success</code>
				li <code>warning</code>
				li <code>error</code>
			p 你可以通过更新中间件和渲染它们的.jade模板轻松支持其它类型的消息。(下面会讲到)。
			p 要在路由控制器中使用提示消息，可以这样做：
			p: code req.flash('info', 'Some information!');
			p 消息使用会话，所以在转发后它们也能留存下来，并且只会显示给用户一次，特别适合用来做状态消息 (比如 "您的修改已经保存") 或表单校验 (比如 "请输入有效的email地址")。
			p 一些Keystone功能(比如更新处理器)可以自动生成提示消息， 并期望有上面的那些类别。
			
			
			a(name="routesviews-firstview")
			h3 你的第一个视图
			
			p 现在我们准备设置你的第一个路由控制器 (给index页面)，以及它要渲染的模板。
			
			p importer (上面那个) 期望你提供给它的目录中包含的 <code>.js</code> 或 <code>.coffee</code> 文件输出的单个方法接受下面这些参数：
			ul.options
				li <code>req</code> - express请求对象
				li <code>res</code> - express响应对象
			
			p 我们的第一个视图控制器非常简单 - 只是渲染一个模板。创建像下面这样的<code>routes/views/index.js</code>文件：
			
			.code-header
				h4 routes/views/index.js
				p home页面视图的路由控制器
			pre: code.language-javascript
				| var keystone = require('keystone');
				| 
				| exports = module.exports = function(req, res) {
				|     
				|     var view = new keystone.View(req, res);
				|     
				|     view.render('index');
				|     
				| }
			
			a(name="routesviews-templates")
			h3 模板
			
			p 现在做路由要渲染的模板。<code>render</code>方法会在<code>web.js</code>中指定的<code>views</code>目录下找寻模板，我们将其设为了<code>/templates/views</code>。
			p 在这个指南中，我们准备用<strong>Jade</strong> 作为模板引擎。要了解Jade，请访问<a href="http://jade-lang.com" target="_blank">jade-lang.org</a>，或者检出优秀的<a href="http://naltatis.github.io/jade-syntax-docs/" target="_blank">活的语法文档</a>通过例子学习。
			p 先来创建<code>templates/views/index.jade</code>：

			.code-header
				h4 templates/views/index.jade
				p home页面视图的模板
			pre
				| extends ../layouts/base
				| 
				| block content
				|     h1 Hello World
			
			p Jade有些很棒的功能可以简化模板 - 包括用布局定义区域。我们准备用一个<code>../common/templates/layout/base.jade</code>布局，在上面那个文件中的第一行里：
			
			.code-header
				h4 templates/layouts/base.jade
				p 视图模板的基本布局
			pre: code
				| include ../mixins/flash-messages
				| 
				| doctype html
				| html
				|     head
				|         meta(charset="utf-8")
				|         meta(name="viewport", content="initial-scale=1.0,user-scalable=no,maximum-scale=1,width=device-width")
				|         
				|         title= title || 'My Keystone Website'
				|         link(rel="shortcut icon", href="/favicon.ico", type="image/x-icon")
				|         link(href="/styles/site.min.css", rel="stylesheet")
				|         
				|         block css
				|         block head
				|     body
				|         
				|         #header My Keystone Website
				|         
				|         #body
				|             
				|             block intro
				|             
				|             +flash-messages(messages)
				|             
				|             block content
				|         
				|         #footer Powered by &lt;a href='http://keystonejs.com', target='_blank'&gt;KeystoneJS&lt;/a&gt;.
				|     
				|     script(src='/js/lib/jquery/jquery-1.10.2.min.js')
				|     
				|     block js
			
			p 我们还要创建一个包含mixin <code>flash-messages</code>的模板<code>templates/mixins/flash-messages.jade</code>。在布局或视图模板中包含mixins可以保持布局和视图文件的整洁，并且mixin可以在多个视图中重用。
			
			.code-header
				h4 templates/mixins/flash-messages.jade
				p 我们的flash-messages mixin
			pre: code
				| mixin flash-messages(messages)
				|     if messages
				|         #flash-messages.container
				|             each message in messages.info
				|                 +flash-message(message, 'info')
				|             each message in messages.success
				|                 +flash-message(message, 'success')
				|             each message in messages.warning
				|                 +flash-message(message, 'warning')
				|             each message in messages.error
				|                 +flash-message(message, 'danger')
				|                 
				| mixin flash-message(message, type)
				|     div(class='alert alert-' + type)
				|         if utils.isObject(message)
				|             if message.title
				|                 h4= message.title
				|             if message.detail
				|                 p= message.detail
				|             if message.list
				|                 ul
				|                     each item in message.list
				|                         li= item
				|         else
				|             = message
			
			a(name="templates_other")
			.contextual-note
				h4 使用其它模板语言
				p KeystoneJS支持<a href='http://expressjs.com/api.html#app.engine', target='_blank'>express支持的所有模板语言</a>。
				p 用参数<code>view engine</code>指明你要用的模板语言(默认为 <code class="data-type">jade</code>)。
				p 如果你想用定制的模板引擎，也要设定<code>custom engine</code> 参数。比如说，express是支持<a href="http://embeddedjs.com/">ejs</a>的， 但你可能想用<a href="https://github.com/RandomEtc/ejs-locals">ejs.locals</a> 作为模板引擎，以利用其扩展的功能。

				pre: code.language-javascript
					| // 修改 web.js 使用定制的模板引擎ejs-locals。
					| var keystone = require('keystone');
					| var engine   = require('ejs-locals');
					| keystone.init({
					|   ...
					|   'custom engine': engine,
					|   'view engine': 'ejs',
					|   ...
					| });
			
			
			a(name="routesviews-publicassets")
			h3 公共资产
			
			p 你想添加自己的css、javascript、图片和其它文件到项目中。在上面的例子中，我们引入了<code>/styles/site.min.css</code>和<code>/js/lib/jquery-1.10.2.min.js</code>。
			p Keystone可以对外提供所有放在<code>public</code>目录下的静态资源。这个路径是在<code>web.js</code>中由<code>static</code>参数指定的。
			p 如果在<code>public</code>文件夹下有<code>.less</code>文件，它还会自动生成相应的<code>.css</code>或缩小化的<code>.min.css</code>文件， 这个在<code>web.js</code>中由<code>less</code>参数指定。要深入了解LESS，请参见<a href="http://lesscss.org" target="_blank">lesscss.org</a>。
			
			//- h4 More on Routes &amp; Views
			//- 
			//- p For more information on how to set up your application's routes and views, and the full documentation for the View class, see the <a href="/zh/docs/database">routes &amp; views guide</a>.
			
			a(name="runningyourapp")
			h2 运行程序
			
			p 现在(几乎)已经准备好运行你的程序了！然而在运行之前，我们应该添加一个<strong>User</strong>，以便可以登录到Keystone的管理界面中。
			
			a(name="runningyourapp-writingupdates")
			h3 编写更新
			
			p 为此我们将要创建一个更新脚本，Keystone会在启动web服务器之前自动运行它。
			
			p 在<code>web.js</code>中设定参数<code>auto update</code>就可以启用Keystone的自动更新功能。
			
			p 当这个参数被设为<code>true</code>时，Keystone会扫描<code>updates</code>目录寻找<code>.js</code>文件，每个文件都应该输出一个单参方法：
			ul
				li <code>next</code> - 更新结束后调用的方法 (包括所有内部调用)
			
			p 更新是用<a href="http://semver.org" target="_blank">语义版本</a>排序的，并且Keystone只会运行它们一次 (成功执行的更新会存在你的数据库里，一个名为<code>app_updates</code>的集合中)。
			
			p 更新文件名应该符合<code>x.x.x-description.js</code>的模式 - 所有跟在第一个连字符之后的字符串都会被忽略，所以你可以在那里描述这个更新。
			
			p 所以，为了在程序第一次启用时自动添加一个新的管理员用户，我们要创建一个<code>updates/0.0.1-admin.js</code>文件：
			
			.code-header
				h4 updates/0.0.1-admin.js
				p 添加第一个管理员的更新脚本 (改成你自己的用户名、email和密码)
			pre: code.language-javascript
				| var keystone = require('keystone'),
				|     User = keystone.list('User');
				| 
				| exports = module.exports = function(done) {
				|     
				|     new User.model({
				|         name: { first: 'Admin', last: 'User' },
				|         email: 'admin@keystonejs.com',
				|         password: 'admin',
				|         canAccessKeystone: true
				|     }).save(done);
				|     
				| };
			
			p.note 你可能不想把真实密码放在代码中，所以最好将默认密码设的简单点，然后在启动程序后登录到Keystone的管理界面中去修改密码。
			
			a(name="runningyourapp-startingkeystone")
			h3 启动Keystone
			
			p 现在已经准备好了，在项目主文件夹下执行这个命令运行你的程序吧：
			p: code node web
			
			p Keystone会自动应用这些更新，然后在默认端口3000上启动web服务器。
			
			p 打开浏览器访问你的首页<a href="http://localhost:3000" target="_blank">localhost:3000</a>。你应该能看到我们的<strong>Hello World!</strong>消息。
			
			p 要登录Keystone的管理界面，请访问<a href="http://localhost:3000/keystone" target="_blank">localhost:3000/keystone</a>。用你放在上面的更新脚本里的email和密码登录，你就能进入Keystone管理界面的首页了。
			
			
			a(name="runningyourapp-nextstep")
			h3 下一步
			
			p ... 搞定了！好吧，实际上还没有。现在该开始搭建你的程序了。要了解Keystone支持的列表参数和域类型，请访问<a href="/zh/docs/database">数据库指南</a>。
			
			p 你还应该<a href="https://twitter.com/keystonejs" target="_blank">在Twitter上关注@KeystoneJS</a>，以便及时了解相关新闻和更新，<a href="https://github.com/keystonejs/keystone/" target="_blank">在GitHub标记 KeystoneJS</a>，并在<a href="https://groups.google.com/d/forum/keystonejs" target="_blank">KeystoneJS谷歌群组</a>讨论这个指南(或者与KeystoneJS有关的一切)。
			
			p 在范例页面上还有更多的<a href="/zh/examples">范例和样本代码</a>。
			
			p 享受使用KeystoneJS的过程吧！
